#!/bin/bash
#
# RabbitMQ Cluster Operator
#
# Copyright 2020 VMware, Inc. All Rights Reserved.
#
# This product is licensed to you under the Mozilla Public license, Version 2.0 (the "License").  You may not use this product except in compliance with the Mozilla Public License.
#
# This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.

set -euo pipefail

NAMESPACE=""

instance=""
username=""
password=""
service=""

usage() {
    usage=$(
        cat <<-END
USAGE:
  Install (latest released) RabbitMQ Cluster Operator
    kubectl rabbitmq install-cluster-operator

  Create a RabbitMQ custom resource - INSTANCE name required, all other flags optional
    kubectl rabbitmq [-n NAMESPACE] create INSTANCE --replicas 1 --service ClusterIP --image rabbitmq:3.8-management --image-pull-secret mysecret
      --tls-secret secret-name --storage-class mystorageclass

  Get a RabbitMQ custom resource and dependant objects
    kubectl rabbitmq [-n NAMESPACE | -A] get INSTANCE

  List all RabbitMQ clusters
    kubectl rabbitmq [-n NAMESPACE | -A] list

  Delete a RabbitMQ cluster (or multiple clusters)
    kubectl rabbitmq [-n NAMESPACE] delete INSTANCE ...

  Print default-user secrets for an instance
    kubectl rabbitmq [-n NAMESPACE] secrets INSTANCE

  Open Management UI for an instance
    kubectl rabbitmq [-n NAMESPACE] manage INSTANCE

  Set log level to 'debug' on all nodes
    kubectl rabbitmq [-n NAMESPACE] debug INSTANCE

  Tail logs from all nodes
    kubectl rabbitmq [-n NAMESPACE] tail INSTANCE
    'tail' subcommand requires the 'tail' plugin. You can install it with 'kubectl krew install tail'

  Run 'rabbitmq-diagnostics observer' on a specific INSTANCE NODE
    kubectl rabbitmq [-n NAMESPACE] observe INSTANCE 0

  Enable all feature flags on an INSTANCE
    kubectl rabbitmq [-n NAMESPACE] enable-all-feature-flags INSTANCE

  Pause reconciliation for an instance
    kubectl rabbitmq [-n NAMESPACE] pause-reconciliation INSTANCE

  Resume reconciliation for an instance
    kubectl rabbitmq [-n NAMESPACE] resume-reconciliation INSTANCE

  List all instances that has the pause reconciliation label
    kubectl rabbitmq [-n NAMESPACE | -A] list-pause-reconciliation-instances

  Run perf-test against an instance - you can pass as many perf test parameters as you want
    kubectl rabbitmq [-n NAMESPACE] perf-test INSTANCE --rate 100
  If you want to monitor perf-test, create the following ServiceMonitor:
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: kubectl-perf-test
    spec:
      endpoints:
      - interval: 15s
        targetPort: 8080
      selector:
        matchLabels:
          app: perf-test

  Print this help
    kubectl rabbitmq help

  Print kubectl-rabbitmq plugin version
    kubectl rabbitmq version
END
    )
    echo "$usage"
}

version() {
  # Since we require to install this plugin via krew, we get the version from krew instead of hardcoding a version to this file.
  failure_msg="version cannot be determined because plugin was not installed via krew"
  if ! command -v kubectl-krew &> /dev/null
  then
      echo "$failure_msg"
      exit 1
  fi

  # We can't use `krew info` because it provides versions about available - not installed - plugins.
  # `krew list` provides versions of installed plugins.
  # We can't redirect stdout of `krew list` because this will suppress the version number (see `kubectl krew list --help`)
  # Therefore, we have to get the version number from the `krew list` logs.
  version_line=$(kubectl krew -v 4 list 2>&1 | grep 'rabbitmq: version=' || true)
  if [[ -z "$version_line" ]];
  then
      echo "$failure_msg"
      exit 1
  fi

  version="${version_line##*rabbitmq: version=}"
  echo "kubectl-rabbitmq $version"
}

get_instance_details() {
    instance=${1}
    username=$(kubectl get ${NAMESPACE} secret "${instance}-default-user" -o jsonpath="{.data.username}" | base64 --decode)
    password=$(kubectl get ${NAMESPACE} secret "${instance}-default-user" -o jsonpath="{.data.password}" | base64 --decode)
    service="$instance"
}

perf_test() {
    get_instance_details "$@"
    shift 1
    perftestopts=$*

    kubectl ${NAMESPACE} run perf-test \
        --expose=true \
        --port=8080 \
        --labels="app=perf-test,run=perf-test" \
        --image=pivotalrabbitmq/perf-test \
        -- --uri "amqp://${username}:${password}@${service}" \
        --metrics-prometheus ${perftestopts}
}

manage() {
    get_instance_details "$@"

    TLS="$(kubectl $NAMESPACE get service ${service} -o jsonpath='{.spec.ports[?(@.name=="management-tls")]}')"
    if [[ -n "$TLS" ]]; then
	    MGMT_PORT=15671
	    MGMT_URL="https://localhost:$MGMT_PORT/"

    else
	    MGMT_PORT=15672
	    MGMT_URL="http://localhost:$MGMT_PORT/"
    fi
    (
        sleep 2
        open "$MGMT_URL"
    ) &
    kubectl ${NAMESPACE} port-forward "service/${service}" $MGMT_PORT
}

list_rabbitmq_clusters() {
    kubectl get ${NAMESPACE} rabbitmqclusters
}

create() {
    local rabbitmq_manifest_file="rabbitmq.yml"
    set -u
    cd "$(mktemp -d)" || exit 1
    {
        echo "apiVersion: rabbitmq.com/v1beta1"
        echo "kind: RabbitmqCluster"
        echo "metadata:"
        echo "  name: $1"
        echo "spec:"
    } >"$rabbitmq_manifest_file"
    shift 1

    # special case when no options are provided
    if [[ "$#" -eq 0 ]]; then
        echo "  {}" >>"$rabbitmq_manifest_file"
    fi

    while [[ "$#" -ne 0 ]]; do
        case "$1" in
        "--replicas")
            shift 1
            echo "  replicas: $1" >>"$rabbitmq_manifest_file"
            shift 1
            ;;
        "--service")
            shift 1
            echo "  service:" >>"$rabbitmq_manifest_file"
            echo "    type: $1" >>"$rabbitmq_manifest_file"
            shift 1
            ;;
        "--image")
            shift 1
            echo "  image: $1" >>"$rabbitmq_manifest_file"
            shift 1
            ;;
        "--image-pull-secret")
            shift 1
            echo "  imagePullSecret: $1" >>"$rabbitmq_manifest_file"
            shift 1
            ;;
        "--unlimited")
            shift 1
            echo "  resources:" >>"$rabbitmq_manifest_file"
            echo "    requests: {}" >>"$rabbitmq_manifest_file"
            echo "    limits: {}" >>"$rabbitmq_manifest_file"
            ;;
        "--tls-secret")
            shift 1
            echo "  tls:" >>"$rabbitmq_manifest_file"
            echo "    secretName: $1" >>"$rabbitmq_manifest_file"
            shift 1
            ;;
        "--storage-class")
            shift 1
            echo "  persistence:" >>"$rabbitmq_manifest_file"
            echo "    storageClassName: $1" >>"$rabbitmq_manifest_file"
            shift 1
            ;;
        *)
            echo "Option '$1' not recongnised"
            exit 1
            ;;
        esac
    done
    kubectl ${NAMESPACE} apply -f "$rabbitmq_manifest_file"
}

delete() {
    for cluster in "$@"; do
        kubectl ${NAMESPACE} delete rabbitmqcluster "${cluster}"
    done
}

observe() {
    kubectl ${NAMESPACE} exec -it "${1}-server-${2}" -- rabbitmq-diagnostics observer
}

get() {
    kubectl get ${NAMESPACE} pods,cm,sts,svc,secrets,rs -l "app.kubernetes.io/name=$1"
}

debug() {
    for node in $(kubectl ${NAMESPACE} get pods -l "app.kubernetes.io/name=${1}" -ocustom-columns=name:.metadata.name --no-headers); do
        echo -n "${node}: "
        kubectl ${NAMESPACE} exec "${node}" -- rabbitmqctl set_log_level debug
    done
}

tail() {
    kubectl tail ${NAMESPACE} --svc "${1}"
}

enable_all_feature_flags() {
    kubectl ${NAMESPACE} exec "${1}-server-0" -- bash -c "rabbitmqctl list_feature_flags | grep disabled | cut -f 1 | xargs -r -L1 rabbitmqctl enable_feature_flag"
}

pause-reconciliation() {
    kubectl ${NAMESPACE} label rabbitmqclusters "${1}" rabbitmq.com/pauseReconciliation=true
}

resume-reconciliation() {
    kubectl ${NAMESPACE} label rabbitmqclusters "${1}" rabbitmq.com/pauseReconciliation-
}

list-pause-reconciliation-instances() {
    kubectl get ${NAMESPACE} rabbitmqclusters -l rabbitmq.com/pauseReconciliation=true --show-labels
}

secrets() {
    get_instance_details "$@"
    echo "username: ${username}"
    echo "password: ${password}"
}

install_cluster_operator() {
    kubectl ${NAMESPACE} apply -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml
}

main() {
    if [[ "$1" == "--help" ]]; then
        usage
        exit 0
    fi

    while getopts ':n:Ah' opt; do
        case "${opt}" in
        h)
            usage
            exit 0
            ;;
        A)
            NAMESPACE="--all-namespaces"
            shift 1
            ;;
        n)
            NAMESPACE="-n ${OPTARG}"
            shift 2
            ;;
        *)
            usage
            ;;
        esac
    done

    case "$1" in
    "perf-test")
        shift 1
        if [[ "$#" -eq 0 ]] || [[ "$1" =~ (--[a-z-]) ]]; then
            echo "Missing instance name"
            usage
            exit 1
        fi
        perf_test "$@"
        ;;
    "manage")
        shift 1
        if [[ "$#" -eq 0 ]] || [[ "$1" =~ (--[a-z-]*) ]]; then
            echo "Missing instance name"
            usage
            exit 1
        fi
        manage "$@"
        ;;
    "list")
        list_rabbitmq_clusters
        ;;
    "create")
        shift 1
        if [[ "$#" -eq 0 ]]; then
            usage
            exit 1
        fi
        create "$@"
        ;;
    "delete")
        shift 1
        if [[ "$#" -eq 0 ]]; then
            usage
            exit 1
        fi
        delete "$@"
        ;;
    "get")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        get "$1"
        ;;
    "debug")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        debug "$1"
        ;;
    "tail")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        tail "$1"
        ;;
    "observe")
        shift 1
        if [[ "$#" -ne 2 ]]; then
            usage
            exit 1
        fi
        observe "$1" "$2"
        ;;
    "secrets")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        secrets "$1"
        ;;
    "enable-all-feature-flags")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        enable_all_feature_flags "$1"
        ;;
    "pause-reconciliation")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        pause-reconciliation "$1"
        ;;
    "resume-reconciliation")
        shift 1
        if [[ "$#" -ne 1 ]]; then
            usage
            exit 1
        fi
        resume-reconciliation "$1"
        ;;
    "list-pause-reconciliation-instances")
        list-pause-reconciliation-instances
        ;;
    "install-cluster-operator")
        shift 1
        if [[ "$#" -gt 0 ]]; then
            usage
            exit 1
        fi
        install_cluster_operator
        ;;
    "help")
        usage
        ;;
    "version")
        version
        ;;
    *)
        usage
        exit 1
        ;;
    esac
}

if [[ "$#" -ge 1 ]]; then
    main "$@"
else
    usage
fi
